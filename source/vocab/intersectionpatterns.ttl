prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix dc: <http://purl.org/dc/terms/>
prefix sdo: <https://schema.org/>
prefix ptg: <http://protege.stanford.edu/plugins/owl/protege#>

prefix bf: <http://id.loc.gov/ontologies/bibframe/>

prefix : <https://id.kb.se/vocab/>
prefix marc: <https://id.kb.se/marc/>

prefix kbrda: <https://id.kb.se/term/rda/>
prefix saogf: <https://id.kb.se/term/saogf/>
prefix ktg: <https://id.kb.se/term/ktg/>  # TODO: replace with saogf equivs once those are defined.

prefix : <https://id.kb.se/vocab/>

##
# Abstract classes entailed by categories (possibly in turn entailed).
# Used for export-to-bf+rda (or revert-to-marc).

## Work subclasses

:Audio ptg:abstract true ;
  owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:Audio]) .

:Cartography ptg:abstract true ;
  owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:Cartography]) .

:Dataset ptg:abstract true ;
  owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:Dataset]) .

:MixedMaterial ptg:abstract true ;
  owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:MixedMaterial]) .

:Kit ptg:abstract true ;
  owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:Kit]) .

:Movement ptg:abstract true ;
  owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:Movement]) .

:MovingImage ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue kbrda:MovingImage]) .

:Multimedia ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:Multimedia]) .

:Music ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:Music]) .

:NonMusicAudio ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue kbrda:Sounds]) .

:NotatedMovement ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue kbrda:NotatedMovement]) .

:NotatedMusic ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue kbrda:NotatedMusic]) .

:PerformedMusic ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue kbrda:PerformedMusic]) .

:StillImage ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue kbrda:StillImage]) .

:Tactile ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue ktg:Tactile]) .

:Text ptg:abstract true ; owl:intersectionOf (:Monograph [ owl:onProperty :category ; owl:hasValue kbrda:Text ] ) .

## Instance subclasses

# Coordinating categories defined in: <../categories/carrierforms.ttl>

# TODO: Deprecate these Instance subclasses; and define blank mappings to just BF base classes (only for TVM)...

:Print owl:intersectionOf (:PhysicalResource [ owl:onProperty :category ; owl:hasValue ktg:Print]) .

:Electronic owl:intersectionOf (:Instance [ owl:onProperty :category ; owl:hasValue ktg:AbstractElectronic ]) .

:Manuscript owl:intersectionOf (:PhysicalResource [ owl:onProperty :category ; owl:hasValue saogf:Handskrifter ]) .

:Microform owl:intersectionOf (:PhysicalResource [ owl:onProperty :category ; owl:hasValue kbrda:Microform ]) .

# TODO: Ensure this is fully dropped!
#:Archival owl:intersectionOf (:PhysicalResource [ ... ]) .

# Complex Instance Classes

:PhysicalResource a owl:Class ;
  rdfs:subClassOf :Instance , dc:PhysicalResource ;
  rdfs:subClassOf [ a owl:Restriction ;
          owl:onProperty :category ;
          owl:minQualifiedCardinality 1 ;
          owl:onClass [ owl:onProperty :broaderTransitive ;
                        owl:hasValue ktg:PhysicalForm ] ] ;
  rdfs:label "Fysisk resurs"@sv , "Physical resource"@en .

:DigitalResource a owl:Class ;
  rdfs:subClassOf :Instance ;
  rdfs:subClassOf [ a owl:Restriction ;
          owl:onProperty :category ;
          owl:minQualifiedCardinality 1 ;
          owl:onClass [ owl:onProperty :broaderTransitive ;
                        owl:hasValue ktg:DigitalForm ] ] ;
  rdfs:label "Digital resurs"@sv , "Digital Resource"@en .


# TODO:
# Upgrade some marc: properties to KBV going forward?
#:videoCharacteristic
#  rdfs:subPropertyOf :format ;
#  rdfs:domain :VideoStorageMedium ;
#  sdo:rangeIncludes :VideoFormat .
# - Or...
# Replace subclasses below with complex patterns?
# These richer types belong the discarded direct rich-type-design...

:TactileMaterial rdfs:subClassOf :Material ;
  skos:closeMatch marc:TacMaterialType .

:ImageMaterial rdfs:subClassOf :Material ;
  skos:broadMatch marc:NonProjectedType .

:MapMaterial rdfs:subClassOf :Material ;
  skos:broadMatch marc:MapMediumType .

:VideoFormat rdfs:subClassOf :Material ;
  skos:broadMatch marc:VideoFormatType .

# TODO: ensure all of these (LHS) can be mapped to one specific type.
# Purpose here is just to define a MARC "rebus" based in on instanceOf (RHS):

# :StillImageInstance :instanceOf :StillImage .
#:StillImageInstance
#  ptg:abstract true ;
#  owl:equivalentClass [ owl:onProperty :instanceOf ; owl:allValuesFrom :StillImage ] ;
#  rdfs:subClassOf [ owl:onProperty :baseMaterial ; owl:someValuesFrom :ImageMaterial ]  .

# :MovingImageInstance :instanceOf :MovingImage .
# :ProjectedImageInstance :instanceOf :ProjectedImage .
# :NotatedMusicInstance :instanceOf :NotatedMusic .
# :KitInstance :instanceOf :Kit .
