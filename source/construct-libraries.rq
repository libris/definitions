prefix owl: <http://www.w3.org/2002/07/owl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix sdo: <http://schema.org/>
prefix bibdb: <http://libris.kb.se/def/lib#>
prefix : <https://id.kb.se/vocab/>
base <https://libris.kb.se/library/>

construct {

    ?library a ?libtype ;
        :meta ?meta ;
        owl:sameAs ?bdb_id, ?sameas ;
        :sigel ?sigel ;
        :name ?name ;
        :url ?url ;
        :qualifier ?dept ;
        :category ?registranturl ;
        :locatedIn ?municipality ;
        :geo ?geo ;
        :country ?country .

    ?meta :created ?created ; :modified ?modified .

    ?geo :latitude ?lat ; :longitude ?long .

} where {

    ?bdb_id
        bibdb:sigel ?sigel ;
        sdo:name ?name .

    bind(encode_for_uri(replace(str(?sigel), "\\s+", "")) as ?sigelslug)

    optional { ?bdb_id a ?type }
    bind(if(?type = sdo:Library, :Library, :Bibliography) as ?libtype)

    bind(iri(concat(str(</library/>), ?sigelslug)) as ?library)

    {

        optional { ?bdb_id :organisation ?org }
        optional { ?bdb_id bibdb:dept ?dept }
        optional {
            ?bdb_id bibdb:libris_reg ?reg . filter ( ?reg = true )
            bind (<https://id.kb.se/term/bibdb/Registrant> as ?registranturl)
        }

        optional {
            ?bdb_id bibdb:date_created ?raw_created .
            bind(concat(?raw_created, '.000Z') as ?created)
        }
        optional {
            ?bdb_id bibdb:date_modified ?raw_modified .
            bind(concat(?raw_modified, '.000Z') as ?modified)
        }
        bind(bnode(coalesce(?created, ?modified)) as ?meta)

        optional {
            ?bdb_id sdo:url ?url .
            FILTER(?url != "" && ?url != "http://")
        }

        optional {
          ?bdb_id bibdb:country_code ?country_code .
          FILTER(?country_code != "")
        }
        # TODO: tr, fi, ...
        bind(if(?country_code = 'se', <https://id.kb.se/country/sw>, ?NO_country) as ?country)

    } union {

        ?bdb_id sdo:address [
            sdo:streetAddress ?streetAddress ;
            sdo:addressLocality ?city ;
            sdo:postalCode ?zipCode
            ] .
        FILTER(!STRSTARTS(?streetAddress, "FE ") && !STRSTARTS(?streetAddress, "FE "))

    } union {

        ?bdb_id bibdb:municipality_code ?municipality_code .
        FILTER(?municipality_code not in ('', '-'))
        bind(IRI(CONCAT(STR(</dataset/geo/sw/municipality/>), ?municipality_code)) as ?municipality)

    } union {

        ?bdb_id sdo:latitude ?lat ; sdo:longitude ?long .
        FILTER(?lat > 0 && ?long > 0)
        bind(concat('POINT(', STR(?long), ' ', STR(?lat), ')') as ?geo)

    }

}
